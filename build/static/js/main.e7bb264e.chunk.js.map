{"version":3,"sources":["serviceWorker.js","Components/MenuBarComponent.js","Utilities/BubbleSortUtility.js","Utilities/InsertionSortUtility.js","Utilities/SelectionSortUtility.js","Utilities/MergeSortUtility.js","Utilities/QuickSortUtility.js","Utilities/NewArrayUtility.js","Components/SortingAnimation.js","index.js"],"names":["Boolean","window","location","hostname","match","MenuBarComponent","props","className","href","disabled","isNewButtonDisable","onClick","new","isSortButtonDisable","bubble","style","backgroundColor","bubbleButtonSelectedColor","insertion","insertionButtonSelectedColor","selection","selectionButtonSelectedColor","merge","mergeButtonSelectedColor","quick","quickButtonSelectedColor","id","bestCase","averageCase","worstCase","numOfComparisons","numOfSwaps","wait","ms","Promise","resolve","setTimeout","BubbleSortUtility","stateArray","speed","a","copyArr","JSON","parse","stringify","animateArr","bubbleSortAlgorithm","bubbleSortAnimation","arr","length","animations","sort","i","j","push","value","temp","numC","numS","_animate","index","blockArray","document","getElementsByClassName","curr","next","isCompare","isSwap","getElementById","innerHTML","currHeight","height","nextHeight","InsertionSortUtility","insertionSortAlgorithm","insertionSortAnimation","SelectionSortUtility","selectionSortAlgorithm","selectionSortAnimation","n","min_idx","MergeSortUtility","mergeSortAlgorithm","mergeSortAnimation","arr1","mergesort","A","from","mid","to","N","k","low","high","m","x","y","QuickSortUtility","quickSortAlgorithm","quickSortAnimation","pi","partition","pivot","isLess","NewArrayUtility","size","min","max","newArray","Array","uuidv4","Math","floor","random","SortingAnimation","state","animationArray","arraySize","minElementSize","maxElementSize","animationSpeed","componentDidMount","title","newArrayHandler","newArr","setState","bubbleSortHandler","comparisons","swaps","console","log","insertionSortHandler","selectionSortHandler","mergeSortHandler","quickSortHandler","boxList","this","map","e","boxHeight","key","Component","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e7bb264e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport '../Styles/MenuBarStyles.css';\n\n// component for menu bar\nconst MenuBarComponent = (props) => {\n    return (\n        <div className='Menu'>\n            <div><a href={'https://github.com/dominikperic'}>github.com/dominikperic</a></div>\n            <button disabled={props.isNewButtonDisable} onClick={props.new}>New Array</button>\n            <button disabled={props.isSortButtonDisable} onClick={props.bubble} style={{backgroundColor: props.bubbleButtonSelectedColor}}>Bubble Sort</button>\n            <button disabled={props.isSortButtonDisable} onClick={props.insertion} style={{backgroundColor: props.insertionButtonSelectedColor}}>Insertion Sort</button>\n            <button disabled={props.isSortButtonDisable} onClick={props.selection} style={{backgroundColor: props.selectionButtonSelectedColor}}>Selection Sort</button>\n            <button disabled={props.isSortButtonDisable} onClick={props.merge} style={{backgroundColor: props.mergeButtonSelectedColor}}>Merge Sort</button>\n            <button disabled={props.isSortButtonDisable} onClick={props.quick} style={{backgroundColor: props.quickButtonSelectedColor}}>Quick Sort</button>\n            <div>\n                <table>\n                    <colgroup>\n                        <col id=\"col1\" />\n                        <col id=\"col2\" />\n                        <col id=\"col3\" />\n                        <col id=\"col4\" />\n                        <col id=\"col5\" />\n                    </colgroup>\n                    <tbody>\n                        <tr className=\"header\">\n                            <td>Best</td>\n                            <td>Average</td>\n                            <td>Worst</td>\n                            <td>Comparisons</td>\n                            <td>Swaps</td>\n                        </tr>\n                        <tr>\n                            <td>{props.bestCase}</td>\n                            <td>{props.averageCase}</td>\n                            <td>{props.worstCase}</td>\n                            <td id='Comparisons'></td>\n                            <td id='Swaps'></td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    );\n}\n\nexport default MenuBarComponent;","let numOfComparisons = 0;\nlet numOfSwaps = 0;\n/* bubble sort utility */\n\n// set a timeout using a promise\nlet wait = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n// initiates bubble sort methods\nconst BubbleSortUtility = async (stateArray, speed) => {\n    let copyArr = JSON.parse(JSON.stringify(stateArray));\n    let animateArr = bubbleSortAlgorithm(copyArr);\n    await bubbleSortAnimation(animateArr, speed);  \n    return [numOfComparisons, numOfSwaps];  \n}\n\n// performs bubble sort on array\nconst bubbleSortAlgorithm = (arr) => {\n    let length = arr.length;\n    let animations = [];\n    sort(arr, length, animations); \n    return animations;\n}\n\n// algorithm for bubble sort\nconst sort = (arr, length, animations) => {\n    for (let i = 0; i < length - 1; i++) {\n        for (let j = 0; j < length - i - 1; j++) {\n            animations.push([j, j+1, true, false]) // highlight animation\n            numOfComparisons++;\n            if (arr[j].value > arr[j+1].value) {\n                numOfSwaps++;\n                let temp = arr[j].value;\n                arr[j].value = arr[j+1].value;\n                arr[j+1].value = temp;\n                animations.push([j, j+1, true, true]) // swap animation\n            }\n            animations.push([j, j+1, false, false]) // un-highlight animation\n        }\n    }\n    return animations;\n}\n\n// performs bubble sort animation\nconst bubbleSortAnimation = async (animateArr, speed) => {\n    var numC = { value: 0 };\n    var numS = { value: 0 };\n    for (let i = 0; i < animateArr.length; i++) { // perform animations\n        _animate(animateArr, speed, i, numC, numS);\n    }\n    await wait(animateArr.length * speed * 2); // wait till all animations are done\n}\n\n// perform highlight, un-highlight, or swap animation\nconst _animate = (animateArr, speed, i, numC, numS) => {\n    (function(index) {\n        setTimeout(function() {\n            let blockArray = document.getElementsByClassName('block');\n            let [curr, next, isCompare, isSwap] = animateArr[i];\n            if (isCompare === true && isSwap === false) { // highlight animation\n                setTimeout(function() {\n                    numC.value++;\n                    document.getElementById(\"Comparisons\").innerHTML = \"\" + numC.value;\n                    blockArray[curr].style.backgroundColor = 'red';\n                    blockArray[next].style.backgroundColor = 'red';\n                }, index * speed);\n            }\n            else if (isCompare === false && isSwap === false) { // un-highlight animation\n                setTimeout(function() {\n                    blockArray[curr].style.backgroundColor = '#282c34';\n                    blockArray[next].style.backgroundColor = '#282c34';\n                }, index * speed);\n            }\n            else if (isCompare === true && isSwap === true) { // swap animation\n                setTimeout(function() {\n                    numS.value++;\n                    document.getElementById(\"Swaps\").innerHTML = \"\" + numS.value;\n                    let currHeight = blockArray[next].style.height;\n                    let nextHeight = blockArray[curr].style.height;\n                    blockArray[curr].style.height = currHeight;\n                    blockArray[next].style.height = nextHeight;\n                    blockArray[curr].style.height = currHeight+'px';\n                    blockArray[next].style.height = nextHeight+'px';\n                }, index * speed);\n            }\n        }, (index) * speed);\n    })(i)\n}\n\nexport default BubbleSortUtility;","let numOfComparisons = 0;\nlet numOfSwaps = 0;\n/* insertion sort utility */\n\n// set a timeout using a promise\nlet wait = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n// initiates insertion sort methods\nconst InsertionSortUtility = async (stateArray, speed) => {\n    let copyArr = JSON.parse(JSON.stringify(stateArray));\n    let animateArr = insertionSortAlgorithm(copyArr);\n    await insertionSortAnimation(animateArr, speed);\n    return [numOfComparisons, numOfSwaps];  \n}\n\n// performs insertion sort on array\nconst insertionSortAlgorithm = (arr) => {\n    let length = arr.length;\n    let animations = [];\n    sort(arr, length, animations); \n    return animations;\n}\n\n// algorithm for insertion sort\nconst sort = (arr, length, animations) => {\n    for (let i = 1; i < length; i++) {\n        let j = i;\n        numOfComparisons++;\n        animations.push([j-1, j, true, false]); // highlight animation\n        animations.push([j-1, j, false, false]) // un-highlight animation\n        if (arr[j].value >= arr[j-1].value) { /* do nothing */ }\n        else {\n            while (j > 0 && arr[j].value < arr[j-1].value) {\n                numOfComparisons++;\n                numOfSwaps++;\n                animations.push([j-1, j, true, false]) // highlight animation\n                animations.push([j-1, j, true, true]) // swap animation\n                let temp = arr[j].value;\n                arr[j].value = arr[j-1].value;\n                arr[j-1].value = temp;\n                animations.push([j-1, j, false, false]) // un-highlight animation\n                j = j - 1;\n            }\n        }\n    }\n    return animations;\n}\n\n// performs insertion sort animation\nconst insertionSortAnimation = async (animateArr, speed) => {\n    var numC = { value: 0 };\n    var numS = { value: 0 };\n    for (let i = 0; i < animateArr.length; i++) { // perform animations\n        _animate(animateArr, speed, i, numC, numS);\n    }\n    await wait(animateArr.length * speed * 2); // wait till all animations are done\n}\n\n// perform highlight, un-highlight, or swap animation\nconst _animate = (animateArr, speed, i, numC, numS) => {\n    (function(index) {\n        setTimeout(function() {\n            let blockArray = document.getElementsByClassName('block');\n            let [curr, next, isCompare, isSwap] = animateArr[i];\n            if (isCompare === true && isSwap === false) { // highlight animation\n                setTimeout(function() {\n                    numC.value++;\n                    document.getElementById(\"Comparisons\").innerHTML = \"\" + numC.value;\n                    blockArray[curr].style.backgroundColor = 'red';\n                    blockArray[next].style.backgroundColor = 'red';\n                }, index * speed);\n            }\n            else if (isCompare === false && isSwap === false) { // un-highlight animation\n                setTimeout(function() {\n                    blockArray[curr].style.backgroundColor = '#282c34';\n                    blockArray[next].style.backgroundColor = '#282c34';\n                }, index * speed);\n            }\n            else if (isCompare === true && isSwap === true) { // swap animation\n                setTimeout(function() {\n                    numS.value++;\n                    document.getElementById(\"Swaps\").innerHTML = \"\" + numS.value;\n                    let currHeight = blockArray[next].style.height;\n                    let nextHeight = blockArray[curr].style.height;\n                    blockArray[curr].style.height = currHeight;\n                    blockArray[next].style.height = nextHeight;\n                    blockArray[curr].style.height = currHeight+'px';\n                    blockArray[next].style.height = nextHeight+'px';\n                }, index * speed);\n            }\n        }, (index) * speed);\n    })(i)\n}\n\nexport default InsertionSortUtility;","let numOfComparisons = 0;\nlet numOfSwaps = 0;\n/* selection sort utility */\n\n// set a timeout using a promise\nlet wait = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n// initiates selection sort methods\nconst SelectionSortUtility = async (stateArray, speed) => { \n    let copyArr = JSON.parse(JSON.stringify(stateArray));\n    let animateArr = selectionSortAlgorithm(copyArr);\n    await selectionSortAnimation(animateArr, speed);\n    return [numOfComparisons, numOfSwaps];\n}\n\n// performs selection sort on array\nconst selectionSortAlgorithm = (arr) => {\n    let n = arr.length; \n    let animations = [];\n    sort(arr, n, animations);\n    return animations;\n}\n\n// algorithm for selection sort\nconst sort = (arr, n, animations) => {\n    for (let i = 0; i < n - 1; i++) { \n        // find the minimum element in unsorted array \n        let min_idx = i;\n        for (let j = i + 1; j < n; j++) {\n            animations.push([j, j, true, false]) // highlight animation\n            numOfComparisons++;\n            if (arr[j].value < arr[min_idx].value) { \n                min_idx = j;\n            }\n            animations.push([j, j, false, false]) // un-highlight animation\n        }\n        // swap the found minimum element with the first element \n        numOfSwaps++;\n        /* animations.push([min_idx, i, true, false]) // highlight animation (NOTE: Uncomment if highlighting swap is desired) */\n        animations.push([min_idx, i, true, true]) // swap animation\n        animations.push([min_idx, i, false, false]) // un-highlight animation\n        let temp = arr[min_idx].value; \n        arr[min_idx].value = arr[i].value; \n        arr[i].value = temp; \n    } \n} \n\n// performs selection sort animation\nconst selectionSortAnimation = async (animateArr, speed) => {\n    var numC = { value: 0 };\n    var numS = { value: 0 };\n    for (let i = 0; i < animateArr.length; i++) { // perform animations\n        _animate(animateArr, speed, i, numC, numS);\n    }\n    await wait(animateArr.length * speed * 2); // wait till all animations are done\n}\n\n// perform highlight, un-highlight, or swap animation\nconst _animate = (animateArr, speed, i, numC, numS) => {\n    (function(index) {\n        setTimeout(function() {\n            let blockArray = document.getElementsByClassName('block');\n            let [curr, next, isCompare, isSwap] = animateArr[i];\n            if (isCompare === true && isSwap === false) { // highlight animation\n                setTimeout(function() {\n                    numC.value++;\n                    document.getElementById(\"Comparisons\").innerHTML = \"\" + numC.value;\n                    blockArray[curr].style.backgroundColor = 'red';\n                    blockArray[next].style.backgroundColor = 'red';\n                }, index * speed);\n            }\n            else if (isCompare === false && isSwap === false) { // un-highlight animation\n                setTimeout(function() {\n                    blockArray[curr].style.backgroundColor = '#282c34';\n                    blockArray[next].style.backgroundColor = '#282c34';\n                }, index * speed);\n            }\n            else if (isCompare === true && isSwap === true) { // swap animation\n                setTimeout(function() {\n                    numS.value++;\n                    document.getElementById(\"Swaps\").innerHTML = \"\" + numS.value;\n                    let currHeight = blockArray[next].style.height;\n                    let nextHeight = blockArray[curr].style.height;\n                    blockArray[curr].style.height = currHeight;\n                    blockArray[next].style.height = nextHeight;\n                    blockArray[curr].style.height = currHeight+'px';\n                    blockArray[next].style.height = nextHeight+'px';\n                }, index * speed);\n            }\n        }, (index) * speed);\n    })(i)\n}\n\nexport default SelectionSortUtility;","let numOfComparisons = 0;\nlet numOfSwaps = 0;\n/* merge sort utility */\n\n// set a timeout using a promise\nlet wait = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n// minimum of two numbers\nconst min = ( x,  y) => { return (x < y) ? x : y; }\n\n// initiates merge sort methods\nconst MergeSortUtility = async (stateArray, speed) => {\n    let copyArr = JSON.parse(JSON.stringify(stateArray));\n    let animateArr = mergeSortAlgorithm(copyArr);\n    await mergeSortAnimation(animateArr, speed);\n    return [numOfComparisons, numOfSwaps];  \n}\n\n// performs merge sort on array\nconst mergeSortAlgorithm = (arr) => {\n    let length = arr.length;\n    let animations = [];\n    let arr1 = JSON.parse(JSON.stringify(arr));\n    mergesort(arr, arr1, 0, arr.length - 1, length, animations);\n    return animations;\n}\n\n// merge two sorted subarrays A[from .. mid] and A[mid + 1 .. to]\nconst merge = ( A,  temp,  from,  mid,  to, N, animations) => {\n\tlet k = from, i = from, j = mid + 1;\n\twhile (i <= mid && j <= to) {\n        animations.push([i, j, true, false]); // highlight animation\n        animations.push([i, j, false, false]); // un-highlight animation\n        numOfComparisons++;\n\t\tif (A[i].value < A[j].value) {\n            numOfSwaps++;\n            animations.push([k, A[i].value, true, true]); // swap animation\n            temp[k++].value = A[i++].value;\n        }\n\t\telse {\n            numOfSwaps++;\n            animations.push([k, A[j].value, true, true]); // swap animation\n            temp[k++].value = A[j++].value; \n        }\n\t}\n\t// copy remaining elements\n\twhile (i < N && i <= mid) {\n        numOfSwaps++;\n        /* animations.push([i, i, true, false]); // highlight animation (NOTE: Uncomment if highlighting swap is desired) */\n        /* animations.push([i, i, false, false]); // un-highlight animation (NOTE: Uncomment if highlighting swap is desired) */\n        animations.push([k, A[i].value, true, true]); // swap animation\n        temp[k++].value = A[i++].value;\n    }\n\t// copy back to the original array to reflect sorted order\n\tfor (let i = from; i <= to; i++)\n\t\tA[i].value = temp[i].value;\n}\n\n// iteratively sort array A[low..high] using temporary array\nconst mergesort = (A,  temp,  low,  high, N, animations) => {\n\t// divide the array into blocks of size m = [1, 2, 4, 8, 16...]\n\tfor (let m = 1; m <= high - low; m = 2*m) {\n\t\tfor (let i = low; i < high; i += 2*m) {\n\t\t\tlet from = i;\n\t\t\tlet mid = i + m - 1;\n\t\t\tlet to = min(i + 2*m - 1, high);\n\t\t\tmerge(A, temp, from, mid, to, N, animations);\n\t\t}\n\t}\n}\n\n// performs merge sort animation\nconst mergeSortAnimation = async (animateArr, speed) => {\n    var numC = { value: 0 };\n    var numS = { value: 0 };\n    for (let i = 0; i < animateArr.length; i++) { // perform animations\n        _animate(animateArr, speed, i, numC, numS);\n    }\n    await wait(animateArr.length * speed * 2); // wait till all animations are done\n}\n\n// perform highlight, un-highlight, or swap animation\nconst _animate = (animateArr, speed, i, numC, numS) => {\n    (function(index) {\n        setTimeout(function() {\n            let blockArray = document.getElementsByClassName('block');\n            let [curr, next, isCompare, isSwap] = animateArr[i];\n            if (isCompare === true && isSwap === false) { // highlight animation\n                setTimeout(function() {\n                    numC.value++;\n                    document.getElementById(\"Comparisons\").innerHTML = \"\" + numC.value;\n                    blockArray[curr].style.backgroundColor = 'red';\n                    blockArray[next].style.backgroundColor = 'red';\n                }, index * speed);\n            }\n            else if (isCompare === false && isSwap === false) { // un-highlight animation\n                setTimeout(function() {\n                    blockArray[curr].style.backgroundColor = '#282c34';\n                    blockArray[next].style.backgroundColor = '#282c34';\n                }, index * speed);\n            }\n            else if (isCompare === true && isSwap === true) { // swap animation\n                setTimeout(function() {\n                    numS.value++;\n                    document.getElementById(\"Swaps\").innerHTML = \"\" + numS.value;\n                    blockArray[curr].style.height = next;\n                    blockArray[curr].style.height = next+'px';\n                }, index * speed);\n            }\n        }, (index) * speed);\n    })(i)\n}\n\nexport default MergeSortUtility;","let numOfComparisons = 0;\nlet numOfSwaps = 0;\n/* quick sort utility */\n\n// set a timeout using a promise\nlet wait = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n// initiates quick sort methods\nconst QuickSortUtility = async (stateArray, speed) => {\n    let copyArr = JSON.parse(JSON.stringify(stateArray));\n    let animateArr = quickSortAlgorithm(copyArr);\n    await quickSortAnimation(animateArr, speed);\n    return [numOfComparisons, numOfSwaps];  \n}\n\n// performs quick sort on array\nconst quickSortAlgorithm = (arr) => {\n    let length = arr.length;\n    let animations = [];\n    sort(arr, 0, length - 1, animations); \n    return animations;\n}\n\n// algorithm for quick sort\nconst sort = (arr, low, high, animations) => { \n    if (low < high) { \n        // pi is partitioning index\n        let pi = partition(arr, low, high, animations); \n        // sort elements before partition and after partition \n        sort(arr, low, pi - 1, animations); \n        sort(arr, pi + 1, high, animations); \n    } \n} \n\n// sort partitioned array\nconst partition = (arr, low, high, animations)  => {\n    let pivot = arr[high].value;  \n    let i = (low-1);\n    let isLess = false;\n    // animations.push([high, high, false, true]) // highlight (NOTE: Uncomment if highlighting partition index is desired)\n    for (let j = low; j < high; j++) { \n        animations.push([j, i+1, true, false]) // highlight animation\n        numOfComparisons++;\n        if (arr[j].value < pivot) { \n            numOfSwaps++;\n            isLess = true;\n            i++;\n            // swap arr[i] and arr[j] \n            let temp = arr[i].value; \n            arr[i].value = arr[j].value; \n            arr[j].value = temp;\n            animations.push([j, i, true, true]) // swap animation\n        } \n        if (!isLess) {\n            animations.push([j, i+1, false, false]) // un-highlight animation\n        }\n        else {\n            animations.push([j, i, false, false]) // un-highlight animation\n        }\n    } \n    numOfSwaps++;\n    /* animations.push([i+1, high, true, false]) // highlight animation (NOTE: Uncomment if highlighting swap is desired) */\n    // swap arr[i+1] and arr[high] (or pivot) \n    let temp = arr[i+1].value; \n    arr[i+1].value = arr[high].value; \n    arr[high].value = temp;\n    animations.push([i+1, high, true, true]) // swap animation\n    animations.push([i+1, high, false, false]) // un-highlight animation\n    /* animations.push([j, i+1, false, false]) // un-highlight animation (NOTE: Uncomment if highlighting swap is desired) */\n    return i+1;\n} \n\n// performs quick sort animation\nconst quickSortAnimation = async (animateArr, speed) => {\n    var numC = { value: 0 };\n    var numS = { value: 0 };\n    for (let i = 0; i < animateArr.length; i++) { // perform animations\n        _animate(animateArr, speed, i, numC, numS);\n    }\n    await wait(animateArr.length * speed * 2); // wait till all animations are done\n}\n\n// perform highlight, un-highlight, or swap animation\nconst _animate = (animateArr, speed, i, numC, numS) => {\n    (function(index) {\n        setTimeout(function() {\n            let blockArray = document.getElementsByClassName('block');\n            let [curr, next, isCompare, isSwap] = animateArr[i];\n            if (isCompare === true && isSwap === false) { // highlight animation\n                setTimeout(function() {\n                    numC.value++;\n                    document.getElementById(\"Comparisons\").innerHTML = \"\" + numC.value;\n                    blockArray[curr].style.backgroundColor = 'red';\n                    blockArray[next].style.backgroundColor = 'red';\n                }, index * speed);\n            }\n            else if (isCompare === false && isSwap === false) { // un-highlight animation\n                setTimeout(function() {\n                    blockArray[curr].style.backgroundColor = '#282c34';\n                    blockArray[next].style.backgroundColor = '#282c34';\n                }, index * speed);\n            }\n            else if (isCompare === true && isSwap === true) { // swap animation\n                setTimeout(function() {\n                    numS.value++;\n                    document.getElementById(\"Swaps\").innerHTML = \"\" + numS.value;\n                    let currHeight = blockArray[next].style.height;\n                    let nextHeight = blockArray[curr].style.height;\n                    blockArray[curr].style.height = currHeight;\n                    blockArray[next].style.height = nextHeight;\n                    blockArray[curr].style.height = currHeight+'px';\n                    blockArray[next].style.height = nextHeight+'px';\n                }, index * speed);\n            }\n        }, (index) * speed);\n    })(i)\n}\n\nexport default QuickSortUtility;","import { v4 as uuidv4 } from 'uuid'; // unique key\n\nconst NewArrayUtility = (size, min, max) => {\n    // populate new array\n    let newArray = new Array(size);\n    for(let i = 0; i < size; i++) {\n        newArray[i] = {id: uuidv4(), value: Math.floor(Math.random() * (max - min + 1)) + min};\n    }\n    return newArray;\n}\n\nexport default NewArrayUtility;","import React, { Component } from 'react';\nimport '../Styles/SortingAnimationStyles.css';\nimport MenuBarComponent from './MenuBarComponent.js';\nimport BubbleSortUtility from '../Utilities/BubbleSortUtility.js';\nimport InsertionSortUtility from '../Utilities/InsertionSortUtility.js';\nimport SelectionSortUtility from '../Utilities/SelectionSortUtility.js';\nimport MergeSortUtility from '../Utilities/MergeSortUtility.js';\nimport QuickSortUtility from '../Utilities/QuickSortUtility.js';\nimport NewArrayUtility from '../Utilities/NewArrayUtility.js';\n\n// main component for animation\nclass SortingAnimation extends Component {\n\n    // components state data\n    state = {\n        animationArray: [],\n        arraySize: 150,\n        minElementSize: 10,\n        maxElementSize: 450,\n        animationSpeed: 1,\n        isNewButtonDisable: false,\n        isSortButtonDisable: false,\n        bestCase: \"Ω(?)\",\n        averageCase: \"θ(?)\",\n        worstCase: \"O(?)\",\n        bubbleButtonSelectedColor: \"\",\n        insertionButtonSelectedColor: \"\",\n        selectionButtonSelectedColor: \"\",\n        mergeButtonSelectedColor: \"\",\n        quickButtonSelectedColor: \"\"\n    }\n\n    // create new array when component mounted\n    componentDidMount = () => {\n        document.title = \"Sorting Animation\"; // set tab title\n        this.newArrayHandler();\n    }\n\n    // initiate new array\n    newArrayHandler = () => {\n        let newArr = NewArrayUtility(this.state.arraySize, this.state.minElementSize, this.state.maxElementSize);\n        this.setState({animationArray: newArr, isSortButtonDisable: false, bubbleButtonSelectedColor: \"white\", insertionButtonSelectedColor: \"white\", \n                        selectionButtonSelectedColor: \"white\", mergeButtonSelectedColor: \"white\", quickButtonSelectedColor: \"white\", \n                        bestCase: \"Ω(?)\", averageCase: \"θ(?)\", worstCase: \"O(?)\"});\n        document.getElementById(\"Comparisons\").innerHTML = \"0\";\n        document.getElementById(\"Swaps\").innerHTML = \"0\";\n    }\n\n    // initiate bubble sort\n    bubbleSortHandler = async () => {\n        this.setState({isSortButtonDisable: true, isNewButtonDisable: true, bubbleButtonSelectedColor: \"#3b3f47\", bestCase: \"Ω(n)\", averageCase: \"θ(n^2)\", worstCase: \"O(n^2)\"});\n        const [comparisons, swaps] = await BubbleSortUtility(this.state.animationArray, this.state.animationSpeed);\n        this.setState({isNewButtonDisable: false});\n        console.log(comparisons);\n        console.log(swaps);\n    }\n\n    // initiate insertion sort\n    insertionSortHandler = async () => {\n        this.setState({isSortButtonDisable: true, isNewButtonDisable: true, insertionButtonSelectedColor: \"#3b3f47\", bestCase: \"Ω(n)\", averageCase: \"θ(n^2)\", worstCase: \"O(n^2)\"});\n        const [comparisons, swaps] = await InsertionSortUtility(this.state.animationArray, this.state.animationSpeed);\n        this.setState({isNewButtonDisable: false});\n        console.log(comparisons);\n        console.log(swaps);\n    }\n\n    // initiate quick sort\n    selectionSortHandler = async () => {\n        this.setState({isSortButtonDisable: true, isNewButtonDisable: true, selectionButtonSelectedColor: \"#3b3f47\", bestCase: \"Ω(n^2)\", averageCase: \"θ(n^2)\", worstCase: \"O(n^2)\"});\n        const [comparisons, swaps] = await SelectionSortUtility(this.state.animationArray, this.state.animationSpeed);\n        this.setState({isNewButtonDisable: false});\n        console.log(comparisons);\n        console.log(swaps);\n    }\n\n    // initiate merge sort\n    mergeSortHandler = async () => {\n        this.setState({isSortButtonDisable: true, isNewButtonDisable: true, mergeButtonSelectedColor: \"#3b3f47\", bestCase: \"Ω(n log(n))\", averageCase: \"θ(n log(n))\", worstCase: \"O(n log(n))\"});\n        const [comparisons, swaps] = await MergeSortUtility(this.state.animationArray, this.state.animationSpeed);\n        this.setState({isNewButtonDisable: false});\n        console.log(comparisons);\n        console.log(swaps);\n    }\n\n    // initiate quick sort  \n    quickSortHandler = async () => {\n        this.setState({isSortButtonDisable: true, isNewButtonDisable: true, quickButtonSelectedColor: \"#3b3f47\", bestCase: \"Ω(n log(n))\", averageCase: \"θ(n log(n))\", worstCase: \"O(n^2)\"});\n        const [comparisons, swaps] = await QuickSortUtility(this.state.animationArray, this.state.animationSpeed);\n        this.setState({isNewButtonDisable: false});\n        console.log(comparisons);\n        console.log(swaps);\n    }\n\n    // render to screen\n    render() {\n        // display list of boxes\n        const boxList = this.state.animationArray.map((e, index) => {\n            const boxHeight = e.value + 'px';\n            return <div className='block' key={e.id} style={{height: boxHeight}}/>;\n        });\n        // render menu bar and box list\n        return (\n            <div>\n                <MenuBarComponent \n                    bubbleButtonSelectedColor={this.state.bubbleButtonSelectedColor}\n                    insertionButtonSelectedColor={this.state.insertionButtonSelectedColor}\n                    selectionButtonSelectedColor={this.state.selectionButtonSelectedColor}\n                    mergeButtonSelectedColor={this.state.mergeButtonSelectedColor}\n                    quickButtonSelectedColor={this.state.quickButtonSelectedColor}\n                    isNewButtonDisable={this.state.isNewButtonDisable}\n                    isSortButtonDisable={this.state.isSortButtonDisable}\n                    numOfComparisons={this.state.numOfComparisons}\n                    numOfSwaps={this.state.numOfSwaps}\n                    bestCase={this.state.bestCase}\n                    averageCase={this.state.averageCase}\n                    worstCase={this.state.worstCase}\n                    new={() => this.newArrayHandler()}\n                    bubble={() => this.bubbleSortHandler()}\n                    insertion={() => this.insertionSortHandler()}\n                    selection={() => this.selectionSortHandler()}\n                    merge={() => this.mergeSortHandler()}\n                    quick={() => this.quickSortHandler()} \n                />\n                <div className='container'>\n                    {boxList}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default SortingAnimation;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport SortingAnimation from './Components/SortingAnimation';\n\nReactDOM.render(\n  <React.StrictMode>\n    <SortingAnimation />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}