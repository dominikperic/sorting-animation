{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\Dominik Peric\\\\Documents\\\\MyProjects\\\\sorting-animation\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import _regeneratorRuntime from\"C:\\\\Users\\\\Dominik Peric\\\\Documents\\\\MyProjects\\\\sorting-animation\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\Dominik Peric\\\\Documents\\\\MyProjects\\\\sorting-animation\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";var numOfComparisons=0;var numOfSwaps=0;/* merge sort utility */ // set a timeout using a promise\nvar wait=function wait(ms){return new Promise(function(resolve){return setTimeout(resolve,ms);});};// minimum of two numbers\nvar min=function min(x,y){return x<y?x:y;};// initiates merge sort methods\nvar MergeSortUtility=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(stateArray,speed){var copyArr,animateArr;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:copyArr=JSON.parse(JSON.stringify(stateArray));animateArr=mergeSortAlgorithm(copyArr);_context.next=4;return mergeSortAnimation(animateArr,speed);case 4:return _context.abrupt(\"return\",[numOfComparisons,numOfSwaps]);case 5:case\"end\":return _context.stop();}}},_callee);}));return function MergeSortUtility(_x,_x2){return _ref.apply(this,arguments);};}();// performs merge sort on array\nvar mergeSortAlgorithm=function mergeSortAlgorithm(arr){var length=arr.length;var animations=[];var arr1=JSON.parse(JSON.stringify(arr));mergesort(arr,arr1,0,arr.length-1,length,animations);return animations;};// merge two sorted subarrays A[from .. mid] and A[mid + 1 .. to]\nvar merge=function merge(A,temp,from,mid,to,N,animations){var k=from,i=from,j=mid+1;while(i<=mid&&j<=to){animations.push([i,j,true,false]);// highlight animation\nanimations.push([i,j,false,false]);// un-highlight animation\nnumOfComparisons++;if(A[i].value<A[j].value){numOfSwaps++;animations.push([k,A[i].value,true,true]);// swap animation\ntemp[k++].value=A[i++].value;}else{numOfSwaps++;animations.push([k,A[j].value,true,true]);// swap animation\ntemp[k++].value=A[j++].value;}}// copy remaining elements\nwhile(i<N&&i<=mid){numOfSwaps++;/* animations.push([i, i, true, false]); // highlight animation (NOTE: Uncomment if highlighting swap is desired) */ /* animations.push([i, i, false, false]); // un-highlight animation (NOTE: Uncomment if highlighting swap is desired) */animations.push([k,A[i].value,true,true]);// swap animation\ntemp[k++].value=A[i++].value;}// copy back to the original array to reflect sorted order\nfor(var _i=from;_i<=to;_i++){A[_i].value=temp[_i].value;}};// iteratively sort array A[low..high] using temporary array\nvar mergesort=function mergesort(A,temp,low,high,N,animations){// divide the array into blocks of size m = [1, 2, 4, 8, 16...]\nfor(var m=1;m<=high-low;m=2*m){for(var i=low;i<high;i+=2*m){var from=i;var mid=i+m-1;var to=min(i+2*m-1,high);merge(A,temp,from,mid,to,N,animations);}}};// performs merge sort animation\nvar mergeSortAnimation=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(animateArr,speed){var numC,numS,i;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:numC={value:0};numS={value:0};for(i=0;i<animateArr.length;i++){// perform animations\n_animate(animateArr,speed,i,numC,numS);}_context2.next=5;return wait(animateArr.length*speed*2);case 5:case\"end\":return _context2.stop();}}},_callee2);}));return function mergeSortAnimation(_x3,_x4){return _ref2.apply(this,arguments);};}();// perform highlight, un-highlight, or swap animation\nvar _animate=function _animate(animateArr,speed,i,numC,numS){(function(index){setTimeout(function(){var blockArray=document.getElementsByClassName('block');var _animateArr$i=_slicedToArray(animateArr[i],4),curr=_animateArr$i[0],next=_animateArr$i[1],isCompare=_animateArr$i[2],isSwap=_animateArr$i[3];if(isCompare===true&&isSwap===false){// highlight animation\nsetTimeout(function(){numC.value++;document.getElementById(\"Comparisons\").innerHTML=\"\"+numC.value;blockArray[curr].style.backgroundColor='red';blockArray[next].style.backgroundColor='red';},index*speed);}else if(isCompare===false&&isSwap===false){// un-highlight animation\nsetTimeout(function(){blockArray[curr].style.backgroundColor='#282c34';blockArray[next].style.backgroundColor='#282c34';},index*speed);}else if(isCompare===true&&isSwap===true){// swap animation\nsetTimeout(function(){numS.value++;document.getElementById(\"Swaps\").innerHTML=\"\"+numS.value;blockArray[curr].style.height=next;blockArray[curr].style.height=next+'px';},index*speed);}},index*speed);})(i);};export default MergeSortUtility;","map":{"version":3,"sources":["C:/Users/Dominik Peric/Documents/MyProjects/sorting-animation/src/Utilities/MergeSortUtility.js"],"names":["numOfComparisons","numOfSwaps","wait","ms","Promise","resolve","setTimeout","min","x","y","MergeSortUtility","stateArray","speed","copyArr","JSON","parse","stringify","animateArr","mergeSortAlgorithm","mergeSortAnimation","arr","length","animations","arr1","mergesort","merge","A","temp","from","mid","to","N","k","i","j","push","value","low","high","m","numC","numS","_animate","index","blockArray","document","getElementsByClassName","curr","next","isCompare","isSwap","getElementById","innerHTML","style","backgroundColor","height"],"mappings":"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","sourcesContent":["let numOfComparisons = 0;\nlet numOfSwaps = 0;\n/* merge sort utility */\n\n// set a timeout using a promise\nlet wait = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n// minimum of two numbers\nconst min = ( x,  y) => { return (x < y) ? x : y; }\n\n// initiates merge sort methods\nconst MergeSortUtility = async (stateArray, speed) => {\n    let copyArr = JSON.parse(JSON.stringify(stateArray));\n    let animateArr = mergeSortAlgorithm(copyArr);\n    await mergeSortAnimation(animateArr, speed);\n    return [numOfComparisons, numOfSwaps];  \n}\n\n// performs merge sort on array\nconst mergeSortAlgorithm = (arr) => {\n    let length = arr.length;\n    let animations = [];\n    let arr1 = JSON.parse(JSON.stringify(arr));\n    mergesort(arr, arr1, 0, arr.length - 1, length, animations);\n    return animations;\n}\n\n// merge two sorted subarrays A[from .. mid] and A[mid + 1 .. to]\nconst merge = ( A,  temp,  from,  mid,  to, N, animations) => {\n\tlet k = from, i = from, j = mid + 1;\n\twhile (i <= mid && j <= to) {\n        animations.push([i, j, true, false]); // highlight animation\n        animations.push([i, j, false, false]); // un-highlight animation\n        numOfComparisons++;\n\t\tif (A[i].value < A[j].value) {\n            numOfSwaps++;\n            animations.push([k, A[i].value, true, true]); // swap animation\n            temp[k++].value = A[i++].value;\n        }\n\t\telse {\n            numOfSwaps++;\n            animations.push([k, A[j].value, true, true]); // swap animation\n            temp[k++].value = A[j++].value; \n        }\n\t}\n\t// copy remaining elements\n\twhile (i < N && i <= mid) {\n        numOfSwaps++;\n        /* animations.push([i, i, true, false]); // highlight animation (NOTE: Uncomment if highlighting swap is desired) */\n        /* animations.push([i, i, false, false]); // un-highlight animation (NOTE: Uncomment if highlighting swap is desired) */\n        animations.push([k, A[i].value, true, true]); // swap animation\n        temp[k++].value = A[i++].value;\n    }\n\t// copy back to the original array to reflect sorted order\n\tfor (let i = from; i <= to; i++)\n\t\tA[i].value = temp[i].value;\n}\n\n// iteratively sort array A[low..high] using temporary array\nconst mergesort = (A,  temp,  low,  high, N, animations) => {\n\t// divide the array into blocks of size m = [1, 2, 4, 8, 16...]\n\tfor (let m = 1; m <= high - low; m = 2*m) {\n\t\tfor (let i = low; i < high; i += 2*m) {\n\t\t\tlet from = i;\n\t\t\tlet mid = i + m - 1;\n\t\t\tlet to = min(i + 2*m - 1, high);\n\t\t\tmerge(A, temp, from, mid, to, N, animations);\n\t\t}\n\t}\n}\n\n// performs merge sort animation\nconst mergeSortAnimation = async (animateArr, speed) => {\n    var numC = { value: 0 };\n    var numS = { value: 0 };\n    for (let i = 0; i < animateArr.length; i++) { // perform animations\n        _animate(animateArr, speed, i, numC, numS);\n    }\n    await wait(animateArr.length * speed * 2); // wait till all animations are done\n}\n\n// perform highlight, un-highlight, or swap animation\nconst _animate = (animateArr, speed, i, numC, numS) => {\n    (function(index) {\n        setTimeout(function() {\n            let blockArray = document.getElementsByClassName('block');\n            let [curr, next, isCompare, isSwap] = animateArr[i];\n            if (isCompare === true && isSwap === false) { // highlight animation\n                setTimeout(function() {\n                    numC.value++;\n                    document.getElementById(\"Comparisons\").innerHTML = \"\" + numC.value;\n                    blockArray[curr].style.backgroundColor = 'red';\n                    blockArray[next].style.backgroundColor = 'red';\n                }, index * speed);\n            }\n            else if (isCompare === false && isSwap === false) { // un-highlight animation\n                setTimeout(function() {\n                    blockArray[curr].style.backgroundColor = '#282c34';\n                    blockArray[next].style.backgroundColor = '#282c34';\n                }, index * speed);\n            }\n            else if (isCompare === true && isSwap === true) { // swap animation\n                setTimeout(function() {\n                    numS.value++;\n                    document.getElementById(\"Swaps\").innerHTML = \"\" + numS.value;\n                    blockArray[curr].style.height = next;\n                    blockArray[curr].style.height = next+'px';\n                }, index * speed);\n            }\n        }, (index) * speed);\n    })(i)\n}\n\nexport default MergeSortUtility;"]},"metadata":{},"sourceType":"module"}